# remap prefix to Control + a
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# add mouse mode
set -g mouse on

# open new panes in the same directory by default
bind c new-window -c "#{pane_current_path}"

# Toggle mouse on with ^A m
bind m \
  set -g mouse on \;\
  display 'Mouse: ON'

# Toggle mouse off with ^A M
bind M \
  set -g mouse off \;\
  display 'Mouse: OFF'

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# Use vim keybindings in copy mode
setw -g mode-keys vi

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+

# Change default shell to ZSH
#set-option -g default-shell /bin/zsh

# command delay? We don't want that, make it short
set -sg escape-time 1

set-option -g repeat-time 325

# Set the numbering of windows to go from 1 instead
# of 0 - silly programmers :|
set-option -g base-index 1
setw -g pane-base-index 1

#Getting interesting now, we use the vertical and horizontal
# symbols to split the screen
bind E split-window -h
bind O split-window -v

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' \
    | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' \
    | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' \
    | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' \
    | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' \
    | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

#
# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
#bind < resize-pane L 20
#bind > resize-pane -R 20
#bind - resize-pane -D 20
#bind = resize-pane -U 20

# start selecting text typing 'v' key (once you are in copy mode)
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel
# bind-key -t vi-copy v begin-selection
# copy selected text to the system's clipboard
#bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard'

# Maximize and restore a pane
unbind Up
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp


# enable activity alerts
setw -g monitor-activity on
set -g visual-activity on

######################
### DESIGN CHANGES ###
######################

# panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred

## Status bar design
# status line
#set -g status-utf8 on
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black

#window mode
setw -g mode-bg colour6
setw -g mode-fg colour0

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse

# Info on left (I don't have a session display for now)
set -g status-left ''


# New, experimental stuff
# Ring the terminal bell from any window, in URxvt this is disabled, but activity is recorded.
#set-option -g bell-action any
#set-option -g bell-on-alert on
set-option -g status-interval 5
# The maximum number of lines held in history, mirror URxvt configuration.
set-option -g history-limit 102400

# Redraw the status line more frequently than the default.
set-option -g status-interval 5
# Preserve any output before running interactive commands, such as Vim.
#set-window-option -g alternate-screen

# Scrolling with Shift-PageUp/Shift-PageDown.
set-option -ga terminal-overrides ",rxvt-unicode-256color:Tc"
# End of experimental stuff

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

set -g default-terminal "xterm-256color"
# set -g default-terminal "screen-256color"

# The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr bold
setw -g mode-fg colour196
setw -g mode-bg colour238

# }
# The panes {

set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour51

# }
# The statusbar {

set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '

setw -g window-status-fg colour138
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# }
# The messages {

set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166

# }
#
# Center the window list
set -g status-justify centre

# put the window list on top
# set -g status-position top

# Resurrecting vim/nvim
# for vim
set -g @resurrect-strategy-vim 'session'
# for neovim
set -g @resurrect-strategy-nvim 'session'

# Automatically start tmux server on boot with systemd
set -g @continuum-boot 'on'

# Either urlview & extract_url need to be installed on the PATH for tmux-urlview to work
#  $ sudo apt install urlview

# Enable tmuxinator
#source ~/.bin/tmuxinator.zsh
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
#set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect' # Save/restore tmux sessions
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'Morantron/tmux-fingers'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
#  $ git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#  $ tmux source ~/.tmux.conf   # while tmux running to reload .tmux.conf
#  <prefix> + I to install plugins
#  <prefix> + U to update plugins
#  <prefix> + alt + u to remove / uninstall plugins not in the plugin list
run '~/.tmux/plugins/tpm/tpm'
